use pxp_ast::{Statement, StatementKind, Expression, ExpressionKind};

use crate::Visitor;

pub fn walk<V: Visitor + ?Sized>(visitor: &mut V, program: &mut [Statement]) {
    for statement in program.iter_mut() {
        visitor.visit_statement(statement);
    }
}

pub fn walk_statement<V: Visitor + ?Sized>(visitor: &mut V, statement: &mut Statement) {
    match &mut statement.kind {
        StatementKind::FullOpeningTag(stmt) => visitor.visit_full_opening_tag(stmt),
        StatementKind::ShortOpeningTag(stmt) => visitor.visit_short_opening_tag(stmt),
        StatementKind::EchoOpeningTag(stmt) => visitor.visit_echo_opening_tag(stmt),
        StatementKind::ClosingTag(stmt) => visitor.visit_closing_tag(stmt),
        StatementKind::InlineHtml(stmt) => visitor.visit_inline_html(stmt),
        StatementKind::Label(stmt) => visitor.visit_label(stmt),
        StatementKind::Goto(stmt) => visitor.visit_goto(stmt),
        StatementKind::HaltCompiler(stmt) => visitor.visit_halt_compiler(stmt),
        StatementKind::Static(stmt) => visitor.visit_static(stmt),
        StatementKind::DoWhile(stmt) => visitor.visit_do_while(stmt),
        StatementKind::While(stmt) => visitor.visit_while(stmt),
        StatementKind::For(stmt) => visitor.visit_for(stmt),
        StatementKind::Foreach(stmt) => visitor.visit_foreach(stmt),
        StatementKind::Break(stmt) => visitor.visit_break(stmt),
        StatementKind::Continue(stmt) => visitor.visit_continue(stmt),
        StatementKind::Constant(stmt) => visitor.visit_constant(stmt),
        StatementKind::Function(stmt) => visitor.visit_function(stmt),
        StatementKind::Class(stmt) => visitor.visit_class(stmt),
        StatementKind::Trait(stmt) => visitor.visit_trait(stmt),
        StatementKind::Interface(stmt) => visitor.visit_interface(stmt),
        StatementKind::If(stmt) => visitor.visit_if(stmt),
        StatementKind::Switch(stmt) => visitor.visit_switch(stmt),
        StatementKind::Echo(stmt) => visitor.visit_echo(stmt),
        StatementKind::Expression(stmt) => visitor.visit_expression_stmt(stmt),
        StatementKind::Return(stmt) => visitor.visit_return(stmt),
        StatementKind::Namespace(stmt) => visitor.visit_namespace(stmt),
        StatementKind::Use(stmt) => visitor.visit_use(stmt),
        StatementKind::GroupUse(stmt) => visitor.visit_group_use(stmt),
        StatementKind::Comment(stmt) => visitor.visit_comment_stmt(stmt),
        StatementKind::Try(stmt) => visitor.visit_try(stmt),
        StatementKind::UnitEnum(stmt) => visitor.visit_unit_enum(stmt),
        StatementKind::BackedEnum(stmt) => visitor.visit_backed_enum(stmt),
        StatementKind::Block(stmt) => visitor.visit_block(stmt),
        StatementKind::Global(stmt) => visitor.visit_global(stmt),
        StatementKind::Declare(stmt) => visitor.visit_declare(stmt),
        StatementKind::Noop(span) => visitor.visit_noop(*span),
    };
}

pub fn walk_expression<V: Visitor + ?Sized>(visitor: &mut V, expression: &mut Expression) {
    match &mut expression.kind {
        ExpressionKind::Missing => visitor.visit_missing_expr(),
        ExpressionKind::Eval(expr) => visitor.visit_eval(expr),
        ExpressionKind::Empty(expr) => visitor.visit_empty(expr),
        ExpressionKind::Die(expr) => visitor.visit_die(expr),
        ExpressionKind::Exit(expr) => visitor.visit_exit(expr),
        ExpressionKind::Isset(expr) => visitor.visit_isset(expr),
        ExpressionKind::Unset(expr) => visitor.visit_unset(expr),
        ExpressionKind::Print(expr) => visitor.visit_print(expr),
        ExpressionKind::Literal(expr) => visitor.visit_literal(expr),
        ExpressionKind::ArithmeticOperation(expr) => visitor.visit_arithmetic_operation(expr),
        ExpressionKind::AssignmentOperation(expr) => visitor.visit_assignment_operation(expr),
        ExpressionKind::BitwiseOperation(expr) => visitor.visit_bitwise_operation(expr),
        ExpressionKind::ComparisonOperation(expr) => visitor.visit_comparison_operation(expr),
        ExpressionKind::LogicalOperation(expr) => visitor.visit_logical_operation(expr),
        ExpressionKind::Concat(expr) => visitor.visit_concat(expr),
        ExpressionKind::Instanceof(expr) => visitor.visit_instanceof(expr),
        ExpressionKind::Reference(expr) => visitor.visit_reference(expr),
        ExpressionKind::Parenthesized(expr) => visitor.visit_parenthesized(expr),
        ExpressionKind::ErrorSuppress(expr) => visitor.visit_error_suppress(expr),
        ExpressionKind::Identifier(expr) => visitor.visit_identifier(expr),
        ExpressionKind::Variable(expr) => visitor.visit_variable(expr),
        ExpressionKind::Include(expr) => visitor.visit_include(expr),
        ExpressionKind::IncludeOnce(expr) => visitor.visit_include_once(expr),
        ExpressionKind::Require(expr) => visitor.visit_require(expr),
        ExpressionKind::RequireOnce(expr) => visitor.visit_require_once(expr),
        ExpressionKind::FunctionCall(expr) => visitor.visit_function_call(expr),
        ExpressionKind::FunctionClosureCreation(expr) => visitor.visit_function_closure_creation(expr),
        ExpressionKind::MethodCall(expr) => visitor.visit_method_call(expr),
        ExpressionKind::MethodClosureCreation(expr) => visitor.visit_method_closure_creation(expr),
        ExpressionKind::NullsafeMethodCall(expr) => visitor.visit_nullsafe_method_call(expr),
        ExpressionKind::StaticMethodCall(expr) => visitor.visit_static_method_call(expr),
        ExpressionKind::StaticVariableMethodCall(expr) => visitor.visit_static_variable_method_call(expr),
        ExpressionKind::StaticMethodClosureCreation(expr) => visitor.visit_static_method_closure_creation(expr),
        ExpressionKind::StaticVariableMethodClosureCreation(expr) => visitor.visit_static_variable_method_closure_creation(expr),
        ExpressionKind::PropertyFetch(expr) => visitor.visit_property_fetch(expr),
        ExpressionKind::NullsafePropertyFetch(expr) => visitor.visit_nullsafe_property_fetch(expr),
        ExpressionKind::StaticPropertyFetch(expr) => visitor.visit_static_property_fetch(expr),
        ExpressionKind::ConstantFetch(expr) => visitor.visit_constant_fetch(expr),
        ExpressionKind::Static => visitor.visit_static_expr(),
        ExpressionKind::Self_ => visitor.visit_self_expr(),
        ExpressionKind::Parent => visitor.visit_parent_expr(),
        ExpressionKind::ShortArray(expr) => visitor.visit_short_array(expr),
        ExpressionKind::Array(expr) => visitor.visit_array(expr),
        ExpressionKind::List(expr) => visitor.visit_list(expr),
        ExpressionKind::Closure(expr) => visitor.visit_closure(expr),
        ExpressionKind::ArrowFunction(expr) => visitor.visit_arrow_function(expr),
        ExpressionKind::New(expr) => visitor.visit_new(expr),
        ExpressionKind::InterpolatedString(expr) => visitor.visit_interpolated_string(expr),
        ExpressionKind::Heredoc(expr) => visitor.visit_heredoc(expr),
        ExpressionKind::Nowdoc(expr) => visitor.visit_nowdoc(expr),
        ExpressionKind::ShellExec(expr) => visitor.visit_shell_exec(expr),
        ExpressionKind::AnonymousClass(expr) => visitor.visit_anonymous_class(expr),
        ExpressionKind::Bool(expr) => visitor.visit_bool(expr),
        ExpressionKind::ArrayIndex(expr) => visitor.visit_array_index(expr),
        ExpressionKind::Null => visitor.visit_null_expr(),
        ExpressionKind::MagicConstant(expr) => visitor.visit_magic_constant(expr),
        ExpressionKind::ShortTernary(expr) => visitor.visit_short_ternary(expr),
        ExpressionKind::Ternary(expr) => visitor.visit_ternary(expr),
        ExpressionKind::Coalesce(expr) => visitor.visit_coalesce(expr),
        ExpressionKind::Clone(expr) => visitor.visit_clone(expr),
        ExpressionKind::Match(expr) => visitor.visit_match(expr),
        ExpressionKind::Throw(expr) => visitor.visit_throw(expr),
        ExpressionKind::Yield(expr) => visitor.visit_yield(expr),
        ExpressionKind::YieldFrom(expr) => visitor.visit_yield_from(expr),
        ExpressionKind::Cast(expr) => visitor.visit_cast(expr),
        ExpressionKind::Noop => visitor.visit_noop_expr(),
    }
}